{"version":3,"sources":["services/getGifs.js","hooks/useGifs.js","components/Spinner/index.js","components/Gif/index.js","components/ListOfGifs/index.js","pages/Home/index.js","pages/SearchResults/index.js","context/StaticContext.js","pages/Detail/index.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","fromApiResponseToGifs","apiResponse","data","Array","isArray","map","image","images","title","id","url","downsized_medium","getGifs","limit","keyword","apiURL","fetch","then","res","json","useGifs","useState","loading","setLoading","gifs","setGifs","useEffect","localStorage","getItem","setItem","Spinner","className","Gif","to","alt","src","ListOfGifs","key","POPULAR_GIFS","Home","setKeyword","useLocation","pushLocation","onSubmit","event","preventDefault","placeholder","onChange","target","value","type","popularGif","SearchResults","params","Context","React","createContext","name","estado","Detail","context","useContext","console","log","App","Provider","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d75f6d4.chunk.js","sourcesContent":["const apiKey = 'dIJrma20pSU6ymMwWnDbiaT7NFHeAGVa'\n\nconst fromApiResponseToGifs = apiResponse => {\n  const {data = []} = apiResponse\n  if (Array.isArray(data)) {\n    const gifs = data.map(image => {\n      const {images, title, id} = image\n      const { url } = images.downsized_medium\n      return { title, id, url }\n    })\n    return gifs\n  }\n  return []\n}\n\nexport default function getGifs ({limit = 25, keyword = 'morty'} = {}) {\n  const apiURL = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${keyword}&limit=${limit}&offset=0&rating=G&lang=en`\n\n  return fetch(apiURL)\n    .then(res => res.json())\n    .then(fromApiResponseToGifs)\n}","import {useEffect,useState} from 'react'\r\nimport getGifs from '../services/getGifs'\r\n\r\nexport function useGifs({keyword} = {keyword: null}) {\r\n    const [loading, setLoading] = useState(false)\r\n    const [gifs, setGifs] = useState([])\r\n\r\n    useEffect(function () {\r\n        setLoading(true)\r\n        // recupero la keyword del local storage\r\n        const keywordToUse = keyword || localStorage.getItem('lastKeyword')\r\n        getGifs({ keyword : keywordToUse })\r\n        .then(gifs => {\r\n            setGifs(gifs)\r\n            setLoading(false)\r\n            // guardo la keyword en el local storage\r\n            localStorage.setItem('lastKeyword', keyword)\r\n            })\r\n    }, [keyword])\r\n\r\n    return{loading,gifs}\r\n}","import React from 'react'\nimport './styles.css'\n\nexport default function Spinner () {\n  return <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n}","import React from 'react'\nimport {Link} from 'wouter'\nimport './Gif.css'\n\nexport default function Gif ({ title, id, url }) {\n  return (\n    <div className=\"Gif\">\n      <Link to={`/gif/${id}`} className='Gif-link'>\n        <h4>{title}</h4>\n        <img alt={title} src={url} />\n      </Link>\n    </div>\n\n  )\n}","import React from 'react'\nimport Gif from '../Gif'\nimport './styles.css'\n\nexport default function ListOfGifs ({gifs}) {\n  return <div className='ListOfGifs'>\n    {\n      gifs.map(({id, title, url}) =>\n        <Gif\n          id={id}\n          key={id}\n          title={title}\n          url={url}\n        />\n      )\n    }\n  </div>\n}","import React, { useState } from \"react\"\nimport { Link, useLocation } from \"wouter\"\nimport {useGifs} from '../../hooks/useGifs'\nimport Spinner from '../../components/Spinner'\nimport ListOfGifs from '../../components/ListOfGifs'\n\n\nconst POPULAR_GIFS = [\"Gatos\", \"Osos\", \"Amor\", \"Pandas\"]\n\nexport default function Home() {\n  const [keyword,setKeyword]= useState('')\n  const [path,pushLocation] = useLocation()\n  const {loading,gifs} = useGifs()\n\n  const handleSubmit = event =>{\n    event.preventDefault()\n    pushLocation(`/search/${keyword}`)\n  }\n  const handleChange = event =>{\n    setKeyword(event.target.value)\n  }\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input placeholder=\"Buscar gifs\" onChange={handleChange} type=\"text\" value={keyword}/>\n      </form>\n      <h3 className=\"App-title\">Última búsqueda</h3>\n      {loading\n      ? <Spinner />\n      : <ListOfGifs gifs={gifs} />\n    }\n      <h3 className=\"App-title\">Los gifs más populares</h3>\n      <ul>\n      {POPULAR_GIFS.map((popularGif) => (\n        <li key={popularGif}>\n          <Link to={`/search/${popularGif}`}>Gifs de {popularGif}</Link>\n        </li>\n      ))}\n      </ul>\n    </>\n  )\n}","import React from 'react'\nimport Spinner from '../../components/Spinner'\nimport ListOfGifs from '../../components/ListOfGifs'\nimport {useGifs} from '../../hooks/useGifs'\n\nexport default function SearchResults ({ params }) {\n  const { keyword } = params\n  const {loading,gifs} = useGifs({keyword})\n\n  return <>\n    {loading\n      ? <Spinner />\n      : <ListOfGifs gifs={gifs} />\n    }\n  </>\n}","import React from 'react'\r\n\r\nconst Context = React.createContext({\r\n    name : 'sin provider',\r\n    estado: true\r\n})\r\n\r\nexport default Context","import React, {useContext} from 'react'\nimport Context from '../../context/StaticContext'\n\nexport default function Detail ({ params }) {\n  const context = useContext(Context)\n  console.log(context)\n  return <h1>GIF con id {params.id}</h1>\n}","import React from 'react';\nimport './App.css'\nimport Home from './pages/Home'\nimport SearchResults from './pages/SearchResults'\nimport Detail from './pages/Detail'\n\nimport { Link, Route } from \"wouter\"\nimport Context from './context/StaticContext'\n\nexport default function App() {\n  return (\n    <Context.Provider value={{name : 'flor abril',estado: true}}>\n      <div className=\"App\">\n        <section className=\"App-content\">\n          <Link to=\"/\">\n            <img className=\"App-logo\" alt='Giffy logo' src='/logo.png' />\n          </Link>\n          <Route\n            component={Home}\n            path=\"/\"\n          />\n          <Route\n            component={SearchResults}\n            path=\"/search/:keyword\"  />\n          <Route\n            component={Detail}\n            path=\"/gif/:id\"\n          />\n        </section>\n      </div>\n    </Context.Provider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}