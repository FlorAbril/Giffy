{"version":3,"sources":["components/Spinner/index.js","services/settings.js","logo.svg","services/getGifs.js","context/GifsContext.js","hooks/useGifs.js","components/Gif/index.js","components/ListOfGifs/index.js","hooks/useNearScreen.js","components/TrendingSearches/index.jsx","components/SearchForm/index.jsx","pages/Home/index.js","pages/SearchResults/index.js","services/getSingleGif.js","hooks/useSingleGif.jsx","pages/Detail/index.js","context/StaticContext.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","API_KEY","API_URL","module","exports","fromApiResponseToGifs","apiResponse","data","Array","isArray","map","image","images","title","id","url","downsized_medium","getGifs","limit","keyword","page","apiURL","fetch","then","res","json","Context","React","createContext","GifsContextProvider","children","useState","gifs","setGifs","Provider","value","useGifs","loading","setLoading","loadingNextPage","setLoadingNextPage","useContext","GifsContext","setPage","keywordToUse","localStorage","getItem","useEffect","setItem","nextGifs","prevGifs","concat","memo","to","alt","src","ListOfGifs","lastKeyword","handleSubmit","key","onClick","require","useRef","useNearScreen","distance","externalRef","once","isNearScreen","setShow","fromRef","element","current","observer","IntersectionObserver","entries","isIntersecting","disconnect","routeMargin","observe","TrendingSearches","lazy","LazyTrending","ref","fallback","onSubmit","setKeyword","event","preventDefault","e","placeholder","onChange","target","type","Home","useLocation","pushLocation","useCallback","Helmet","decodeURI","SearchResults","params","debounceHandleNextpage","debounce","prevPage","name","content","useSingleGif","gifFromCache","find","singleGif","gif","setGif","isLoading","isError","setIsError","getSigleGif","catch","err","Detail","StaticContext","estado","App","LogoImage","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"gGAAA,4DAGe,SAASA,IACtB,OAAO,yBAAKC,UAAU,YAAW,8BAAW,8BAAW,8BAAW,iC,+BCJpE,oEAAO,IAAMC,EAAU,mCACVC,EAAU,4B,sBCDvBC,EAAOC,QAAU,IAA0B,kC,8OCGrCC,EAAwB,SAAAC,GAAgB,IAAD,EACvBA,EAAbC,YADoC,MAC7B,GAD6B,EAE3C,OAAIC,MAAMC,QAAQF,GACHA,EAAKG,KAAI,SAAAC,GAAU,IACvBC,EAAqBD,EAArBC,OAEP,MAAO,CAAEC,MAFmBF,EAAbE,MAECC,GAFYH,EAANG,GAEFC,IADJH,EAAOI,iBAAfD,QAKL,IAGM,SAASE,IAAyD,IAAD,yDAAJ,GAAI,IAA9CC,aAA8C,MAAtC,GAAsC,MAAlCC,eAAkC,MAAxB,QAAwB,MAAfC,YAAe,MAAT,EAAS,EACxEC,EAAM,UAAMnB,IAAN,gCAAqCD,IAArC,cAAkDkB,EAAlD,kBAAmED,EAAnE,mBAAmFE,EAAOF,EAA1F,qBAEZ,OAAOI,MAAMD,GACVE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,KAAKlB,GClBV,IAAMqB,EAAUC,IAAMC,cAAc,IAE7B,SAASC,EAAT,GAAyC,IAAXC,EAAU,EAAVA,SAAU,EACpBC,mBAAS,IADW,mBACpCC,EADoC,KAC/BC,EAD+B,KAE3C,OAAO,kBAACP,EAAQQ,SAAT,CAAkBC,MAAO,CAACH,OAAKC,YACjCH,GAKMJ,QCRR,SAASU,IAAsC,IAAD,yDAAjB,CAACjB,QAAS,MAArBA,EAA4B,EAA5BA,QAA4B,EACnBY,oBAAS,GADU,mBAC1CM,EAD0C,KACjCC,EADiC,OAEHP,oBAAS,GAFN,mBAE1CQ,EAF0C,KAEzBC,EAFyB,OAG1BC,qBAAWC,GAA3BV,EAH0C,EAG1CA,KAAKC,EAHqC,EAGrCA,QAHqC,EAI1BF,mBALN,GACgC,mBAI1CX,EAJ0C,KAIrCuB,EAJqC,KAO3CC,EAAezB,GAAW0B,aAAaC,QAAQ,eAuBrD,OArBAC,qBAAU,WACNT,GAAW,GACXrB,EAAQ,CAAEE,QAAUyB,IACnBrB,MAAK,SAAAS,GACFC,EAAQD,GACRM,GAAW,GAEXO,aAAaG,QAAQ,cAAeJ,QAEzC,CAACzB,EAASyB,EAAcX,IAE3Bc,qBAAU,WArBO,IAsBV3B,IACHoB,GAAmB,GACnBvB,EAAQ,CAACE,QAASyB,EAAcxB,SAC3BG,MAAK,SAAA0B,GACDhB,GAAQ,SAAAiB,GAAQ,OAAIA,EAASC,OAAOF,MACpCT,GAAmB,SAE9B,CAACI,EAAcxB,EAAKa,IAEhB,CAACI,UAAQE,kBAAgBP,OAAKW,UAAQC,gB,iBCnBjCjB,UAAMyB,MAZrB,YAAmC,IAAnBvC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,GAAIC,EAAO,EAAPA,IACzB,OACE,yBAAKf,UAAU,OACb,kBAAC,IAAD,CAAMqD,GAAE,eAAUvC,GAAMd,UAAU,YAChC,4BAAKa,GACL,yBAAKyC,IAAKzC,EAAO0C,IAAKxC,S,MCLf,SAASyC,EAAT,GAA6D,IAAvCxB,EAAsC,EAAtCA,KAAKnB,EAAiC,EAAjCA,MAAM4C,EAA2B,EAA3BA,YAAYC,EAAe,EAAfA,aAC1D,OAAO,6BACC,4BAAK7C,GACL,yBAAKb,UAAU,cAEXgC,EAAKtB,KAAI,gBAAEI,EAAF,EAAEA,GAAID,EAAN,EAAMA,MAAOE,EAAb,EAAaA,IAAb,OACP,kBAAC,EAAD,CACED,GAAIA,EACJ6C,IAAK7C,EACLD,MAAOA,EACPE,IAAKA,QAKZ0C,GAAe,4BAAQzD,UAAU,SAAS4D,QAAS,kBAAIF,EAAaD,KAArD,e,MCnBcI,EAAQ,GAAxC9B,E,EAAAA,SAAUgB,E,EAAAA,UAAWe,E,EAAAA,OAEd,SAASC,IAAiE,IAAD,yDAAJ,GAAI,IAAjDC,gBAAiD,MAAvC,QAAuC,EAA9BC,EAA8B,EAA9BA,YAA8B,IAAjBC,YAAiB,WACrDnC,GAAS,GAD4C,mBAC7EoC,EAD6E,KAChEC,EADgE,KAE9EC,EAAUP,IAmBhB,OAjBAf,GAAU,WACN,IAAMuB,EAAUL,EAAcA,EAAYM,QAAUF,EAAQE,QAWtDC,EAAW,IAAIC,sBATJ,SAACC,EAAQF,GACXE,EAAQ,GACbC,gBACFP,GAAQ,GACRF,GAAQM,EAASI,eAEhBV,GAAQE,GAAQ,KAG0B,CAAES,YAAcb,IAEhEM,GAASE,EAASM,QAAQR,KAC/B,CAACN,EAAUC,EAAYC,IAElB,CAACC,eAAcE,WCnB1B,IAAMU,EAAmBpD,IAAMqD,MAC3B,kBAAM,gCAGK,SAASC,IAAe,IAAD,EACHlB,EAAc,CAACC,SAAS,QAAhDG,EAD2B,EAC3BA,aAAaE,EADc,EACdA,QAEpB,OAAO,yBAAKa,IAAKb,GACb,kBAAC,WAAD,CAAUc,SAAU,kBAACpF,EAAA,EAAD,OACfoE,GAAgB,kBAACY,EAAD,QCMdpD,UAAMyB,MAjBrB,YAAiC,IAAZgC,EAAW,EAAXA,SAAW,EACErD,mBAAS,IADX,mBACrBZ,EADqB,KACZkE,EADY,KAGtB3B,EAAe,SAAC4B,EAAOnE,GACzBmE,EAAMC,iBACNH,EAASjE,IAMb,OAAO,0BAAMiE,SAAU,SAACI,GAAD,OAAO9B,EAAa8B,EAAGrE,KAC1C,4BAAQnB,UAAU,iBAAlB,UACA,2BAAOyF,YAAY,cAAcC,SANhB,SAAAJ,GACjBD,EAAWC,EAAMK,OAAOxD,QAKiCyD,KAAK,OAAOzD,MAAOhB,Q,OCJrE,SAAS0E,IAAQ,IAAD,EACJC,cAAhBC,EADoB,sBAEoB3D,IAA1CC,EAFsB,EAEtBA,QAAQL,EAFc,EAEdA,KAAmByB,EAFL,EAETb,aAGdc,EAAesC,uBAAY,SAAC7E,GAChC4E,EAAa,WAAD,OAAY5E,MACxB,CAAC4E,IAEH,OACE,oCACE,kBAACE,EAAA,EAAD,KACE,gDAEH,kBAAC,EAAD,CAAYb,SAAU1B,IAGrBrB,EAAU,kBAACtC,EAAA,EAAD,MACX,yBAAKC,UAAU,eAEbqC,GACK,kBAACmB,EAAD,CAAYxB,KAAMA,EAAMnB,MAAK,iCAAsBqF,UAAUzC,IAAgBA,YAAaA,EAAaC,aAAcA,IAE3H,kBAACuB,EAAD,Q,qBC1BS,SAASkB,EAAT,GAAqC,IAC1ChF,EADyC,EAAViF,OAC/BjF,QADyC,EAElBiB,EAAQ,CAACjB,YAAjCkB,EAF0C,EAE1CA,QAAQL,EAFkC,EAElCA,KAAKW,EAF6B,EAE7BA,QACdsB,EAAcH,mBACbK,EAAgBJ,EAAc,CACnCE,YAAa5B,EAAU,KAAM4B,EAC7BC,MAAM,IAFDC,aAIDtD,EAAQmB,EAAI,kBAAckE,UAAU/E,IAAa,GAGjDkF,EAAyBL,sBAC9BM,KAAS,kBAAK3D,GAAQ,SAAA4D,GAAQ,OAAIA,EAAU,OAAI,KAC/C,CAAC5D,IAOH,OALAI,qBAAU,WACLoB,GAAckC,MACjB,CAAClC,EAAckC,IAGV,oCACJhE,EACG,kBAACtC,EAAA,EAAD,MACA,oCACE,kBAACkG,EAAA,EAAD,KACE,+BAAQpF,GACR,0BAAM2F,KAAK,cAAcC,QAAS5F,KAEpC,kBAAC2C,EAAD,CAAYxB,KAAMA,EAAMnB,MAAOqF,UAAU/E,KACzC,yBAAKL,GAAG,QAAQoE,IAAKjB,MCnC/B,IAAM5D,EAAwB,SAAAC,GAAgB,IACnCC,EAAQD,EAARC,KACAK,EAAqBL,EAArBK,OAEP,MAAO,CAAEC,MAFmBN,EAAbM,MAECC,GAFYP,EAANO,GAEFC,IADJH,EAAOI,iBAAfD,MCDG,SAAS2F,EAAT,GAA4B,IAAL5F,EAAI,EAAJA,GAE5B6F,EADSvE,IAARJ,KACmB4E,MAAK,SAAAC,GAAS,OAAIA,EAAU/F,KAAOA,KAFvB,EAGhBiB,mBAAS4E,GAHO,mBAG/BG,EAH+B,KAG1BC,EAH0B,OAIPhF,oBAAS,GAJF,mBAI/BiF,EAJ+B,KAIrB1E,EAJqB,OAKTP,oBAAS,GALA,mBAK/BkF,EAL+B,KAKvBC,EALuB,KAqBtC,OAdAnE,qBAAU,WACF+D,IACAxE,GAAW,GDHR,YAA2B,IAALxB,EAAI,EAAJA,GACjC,OAAOQ,MAAM,GAAD,OAAIpB,IAAJ,iBAAoBY,EAApB,oBAAkCb,MACzCsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,KAAKlB,GCCF8G,CAAY,CAACrG,OACZS,MAAK,SAAAuF,GACFC,EAAOD,GACPxE,GAAW,GACX4E,GAAW,MACZE,OAAM,SAAAC,GACL/E,GAAW,GACX4E,GAAW,SAEhB,CAACJ,EAAIhG,IAEL,CAACgG,MAAIE,YAAUC,WCjBX,SAASK,EAAT,GAA8B,IAAD,EACVZ,EAAa,CAAC5F,GADJ,EAAVsF,OACyBtF,KAAlDgG,EADmC,EACnCA,IAAIE,EAD+B,EAC/BA,UAAUC,EADqB,EACrBA,QACfpG,EAAQiG,EAAMA,EAAIjG,MAAQ,GAGhC,OAAGmG,EAEC,oCACE,kBAACf,EAAA,EAAD,KAAQ,+CACR,kBAAClG,EAAA,EAAD,OAIHkH,EAAgB,kBAAC,IAAD,CAAU5D,GAAG,SAC5ByD,EAEI,oCACN,kBAACb,EAAA,EAAD,KACE,+BAAQpF,EAAR,aAEF,kBAAC,EAAQiG,IANK,KCpBlB,IAMeS,EANO5F,IAAMC,cAAc,CACtC4E,KAAO,eACPgB,QAAQ,I,iBCMG,SAASC,IACtB,OACE,kBAAC,EAAcvF,SAAf,CAAwBC,MAAO,CAACqE,KAAO,aAAagB,QAAQ,IAC1D,yBAAKxH,UAAU,OACb,6BAASA,UAAU,eACjB,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMqD,GAAG,KACP,yBAAKE,IAAKmE,IAAWpE,IAAI,QAAQtD,UAAU,eAG/C,kBAAC6B,EAAD,KACE,kBAAC,IAAD,CACE8F,UAAW9B,EACX+B,KAAK,MAEL,kBAAC,IAAD,CACAD,UAAW9B,EACX+B,KAAK,WAEP,kBAAC,IAAD,CACED,UAAWxB,EACXyB,KAAK,qBACP,kBAAC,IAAD,CACED,UAAWL,EACXM,KAAK,aAEP,kBAAC,IAAD,CACED,UAAW,kBAAK,8CAChBC,KAAK,aC1BCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlH,MAAK,SAAAmH,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71860cac.chunk.js","sourcesContent":["import React from 'react'\nimport './styles.css'\n\nexport default function Spinner () {\n  return <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n}","export const API_KEY = 'dIJrma20pSU6ymMwWnDbiaT7NFHeAGVa'\r\nexport const API_URL = 'https://api.giphy.com/v1'\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.6579f55f.svg\";","import {API_KEY, API_URL} from './settings'\n\n\nconst fromApiResponseToGifs = apiResponse => {\n  const {data = []} = apiResponse\n  if (Array.isArray(data)) {\n    const gifs = data.map(image => {\n      const {images, title, id} = image\n      const { url } = images.downsized_medium\n      return { title, id, url }\n    })\n    return gifs\n  }\n  return []\n}\n\nexport default function getGifs ({limit = 10, keyword = 'morty', page= 0} = {}) {\n  const apiURL = `${API_URL}/gifs/search?api_key=${API_KEY}&q=${keyword}&limit=${limit}&offset=${page * limit}&rating=G&lang=en`\n\n  return fetch(apiURL)\n    .then(res => res.json())\n    .then(fromApiResponseToGifs)\n}","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst Context = React.createContext({})\r\n\r\nexport function GifsContextProvider({children}){\r\n    const [gifs,setGifs] = useState([])\r\n    return <Context.Provider value={{gifs,setGifs}}>\r\n        {children}\r\n\r\n    </Context.Provider>\r\n}\r\n\r\nexport default Context","import {useContext, useEffect,useState} from 'react'\r\nimport getGifs from 'services/getGifs'\r\nimport GifsContext from 'context/GifsContext'\r\n\r\nconst INITIAL_PAGE = 0\r\nexport function useGifs({keyword} = {keyword: null}) {\r\n    const [loading, setLoading] = useState(false)\r\n    const [loadingNextPage, setLoadingNextPage] = useState(false)\r\n    const {gifs,setGifs} = useContext(GifsContext)\r\n    const [page,setPage] = useState(INITIAL_PAGE)\r\n\r\n    // recupero la keyword del local storage\r\n    const keywordToUse = keyword || localStorage.getItem('lastKeyword')\r\n\r\n    useEffect(function () {\r\n        setLoading(true)\r\n        getGifs({ keyword : keywordToUse })\r\n        .then(gifs => {\r\n            setGifs(gifs)\r\n            setLoading(false)\r\n            // guardo la keyword en el local storage\r\n            localStorage.setItem('lastKeyword', keywordToUse)\r\n            })\r\n    }, [keyword, keywordToUse, setGifs])\r\n\r\n    useEffect(()=>{\r\n        if(page === INITIAL_PAGE) return\r\n        setLoadingNextPage(true)\r\n        getGifs({keyword: keywordToUse, page})\r\n            .then(nextGifs =>{\r\n                 setGifs(prevGifs => prevGifs.concat(nextGifs))\r\n                 setLoadingNextPage(false)\r\n            })\r\n    },[keywordToUse, page,setGifs])\r\n\r\n    return{loading,loadingNextPage,gifs,setPage,keywordToUse}\r\n}","import React from 'react'\nimport {Link} from 'wouter'\nimport './Gif.css'\n\nfunction Gif ({ title, id, url }) {\n  return (\n    <div className=\"Gif\">\n      <Link to={`/gif/${id}`} className='Gif-link'>\n        <h4>{title}</h4>\n        <img alt={title} src={url} />\n      </Link>\n    </div>\n\n  )\n}\n\nexport default React.memo(Gif)\n","import React from 'react'\nimport Gif from 'components/Gif'\nimport './styles.css'\n\nexport default function ListOfGifs ({gifs,title,lastKeyword,handleSubmit}) {\n  return <div>\n          <h3>{title}</h3>\n          <div className='ListOfGifs'>\n            {\n              gifs.map(({id, title, url}) =>\n                <Gif\n                  id={id}\n                  key={id}\n                  title={title}\n                  url={url}\n                />\n              )\n            }\n          </div>\n          {lastKeyword && <button className='button' onClick={()=>handleSubmit(lastKeyword)}>Ver más</button>}\n          \n  \n    </div>\n}","const { useState, useEffect, useRef } = require(\"react\")\r\n\r\nexport default function useNearScreen({distance= '100px', externalRef, once = true}={}) {\r\n    const [isNearScreen,setShow] = useState(false)\r\n    const fromRef = useRef()\r\n\r\n    useEffect(function () {\r\n        const element = externalRef ? externalRef.current : fromRef.current\r\n\r\n        const onChange = (entries,observer) =>{\r\n            const el = entries[0]\r\n            if(el.isIntersecting){\r\n                setShow(true) \r\n                once && observer.disconnect()\r\n            }else{\r\n                !once && setShow(false)\r\n            }\r\n        }\r\n        const observer = new IntersectionObserver(onChange,{ routeMargin : distance })\r\n    \r\n        if(element) observer.observe(element)\r\n    },[distance, externalRef,once]) \r\n\r\n    return {isNearScreen, fromRef}\r\n}\r\n","import React, {Suspense} from 'react'\r\nimport useNearScreen from 'hooks/useNearScreen';\r\nimport Spinner from 'components/Spinner';\r\n\r\nconst TrendingSearches = React.lazy(\r\n    () => import('./TrendingSearches')\r\n)\r\n\r\nexport default function LazyTrending(){\r\n    const {isNearScreen,fromRef} = useNearScreen({distance:'1px'})\r\n     \r\n    return <div ref={fromRef}>\r\n        <Suspense fallback={<Spinner/>}> \r\n            {isNearScreen && <TrendingSearches />}\r\n        </Suspense>\r\n        </div>\r\n} ","import React, { useState} from 'react';\r\n\r\nfunction SearchForm({onSubmit}) {\r\n    const [keyword, setKeyword] = useState('')\r\n\r\n    const handleSubmit = (event, keyword) =>{\r\n        event.preventDefault()\r\n        onSubmit(keyword)\r\n      }\r\n    const handleChange = event =>{\r\n        setKeyword(event.target.value)\r\n      }\r\n\r\n    return <form onSubmit={(e) => handleSubmit(e, keyword)}>\r\n        <button className='search-button'>Buscar</button>\r\n        <input placeholder=\"Buscar gifs\" onChange={handleChange} type=\"text\" value={keyword} />\r\n    </form>\r\n}\r\n\r\nexport default React.memo(SearchForm)","import React, { useCallback} from \"react\"\nimport {useLocation } from \"wouter\"\nimport {useGifs} from 'hooks/useGifs'\nimport Spinner from 'components/Spinner'\nimport ListOfGifs from 'components/ListOfGifs'\nimport LazyTrending from 'components/TrendingSearches/index'\nimport SearchForm from \"components/SearchForm\"\nimport { Helmet } from \"react-helmet\"\n\n\n\nexport default function Home() {\n  const [, pushLocation] = useLocation()\n  const {loading,gifs,keywordToUse: lastKeyword} = useGifs()\n  \n\n  const handleSubmit = useCallback((keyword) =>{\n    pushLocation(`/search/${keyword}`)\n  },[pushLocation])\n  \n  return (\n    <>\n      <Helmet>\n        <title>Home | Giffy</title>\n      </Helmet>\n     <SearchForm onSubmit={handleSubmit}/>\n     \n    {\n      loading ? <Spinner /> :\n     <div className=\"wrapper-gif\">\n       \n      {loading \n        ||  <ListOfGifs gifs={gifs} title={`Última búsqueda: ${decodeURI(lastKeyword)}`} lastKeyword={lastKeyword} handleSubmit={handleSubmit}/> \n      }\n      <LazyTrending/>\n     </div>\n    }\n    </>\n  )\n}\n\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport Spinner from 'components/Spinner'\nimport ListOfGifs from 'components/ListOfGifs'\nimport {useGifs} from 'hooks/useGifs'\nimport useNearScreen from 'hooks/useNearScreen'\nimport debounce from 'just-debounce-it'\nimport { Helmet } from 'react-helmet'\n\nexport default function SearchResults ({ params }) {\n  const { keyword } = params\n  const {loading,gifs,setPage} = useGifs({keyword})\n  const externalRef = useRef()\n  const {isNearScreen} = useNearScreen({\n    externalRef: loading ? null: externalRef,\n    once: false\n  })\n  const title = gifs ? `Gifs de ${decodeURI(keyword)}` : ''\n  \n \n  const debounceHandleNextpage = useCallback(\n   debounce(()=> setPage(prevPage => prevPage +1), 100)\n   ,[setPage])\n\n  useEffect(function(){\n    if(isNearScreen) debounceHandleNextpage()\n  },[isNearScreen, debounceHandleNextpage])\n\n\n  return <>\n    {loading\n      ? <Spinner />\n      : <> \n          <Helmet>\n            <title>{title}</title>\n            <meta name='description' content={title}></meta>\n          </Helmet>\n          <ListOfGifs gifs={gifs} title={decodeURI(keyword)} />\n          <div id=\"visor\" ref={externalRef} ></div>\n        </>\n    }\n  </>\n}","import {API_KEY, API_URL} from './settings'\r\n\r\nconst fromApiResponseToGifs = apiResponse => {\r\n    const {data} = apiResponse\r\n    const {images, title, id} = data\r\n    const { url } = images.downsized_medium\r\n    return { title, id, url }\r\n}\r\n\r\n\r\nexport default function getSigleGif({id}){\r\n    return fetch(`${API_URL}/gifs/${id}?api_key=${API_KEY}`)\r\n        .then(res => res.json())\r\n        .then(fromApiResponseToGifs)\r\n}","import { useEffect, useState } from 'react';\r\nimport getSigleGif from 'services/getSingleGif';\r\nimport { useGifs } from './useGifs';\r\n\r\nexport default function useSingleGif({id}){\r\n    const {gifs} = useGifs()\r\n    const gifFromCache = gifs.find(singleGif => singleGif.id === id)\r\n    const [gif, setGif] = useState(gifFromCache)\r\n    const [isLoading,setLoading] = useState(false)\r\n    const [isError,setIsError] = useState(false)\r\n\r\n    useEffect(()=>{ \r\n        if(!gif) {\r\n            setLoading(true)\r\n            getSigleGif({id})\r\n            .then(gif => {\r\n                setGif(gif)\r\n                setLoading(false)\r\n                setIsError(false)\r\n            }).catch(err=>{\r\n                setLoading(false)\r\n                setIsError(true)\r\n            })\r\n        }},[gif,id])\r\n\r\n    return {gif,isLoading,isError}\r\n}","import React from 'react'\nimport Gif from 'components/Gif'\nimport useSingleGif from 'hooks/useSingleGif'\nimport Spinner from 'components/Spinner'\nimport { Redirect } from 'wouter'\nimport {Helmet} from \"react-helmet\";\n\n\nexport default function Detail ({ params }) {\n  const {gif,isLoading,isError} = useSingleGif({id: params.id})\n  const title = gif ? gif.title : ''\n \n\n  if(isLoading){ \n    return (\n      <>\n        <Helmet><title>Cargando...</title></Helmet>\n        <Spinner/>\n      </>\n  )}\n\n  if(isError) return <Redirect to='/404'/>\n  if(!gif) return null\n\n  return (<>\n    <Helmet>\n      <title>{title} | Giffy</title>\n    </Helmet>\n    <Gif {...gif}></Gif>\n  </>\n  )\n}","import React from 'react'\r\n\r\nconst StaticContext = React.createContext({\r\n    name : 'sin provider',\r\n    estado: true\r\n})\r\n\r\n\r\nexport default StaticContext","import React from 'react';\nimport './App.css'\nimport Home from './pages/Home'\nimport SearchResults from './pages/SearchResults'\nimport Detail from './pages/Detail'\nimport { Link, Route } from \"wouter\"\nimport StaticContext from './context/StaticContext'\nimport {GifsContextProvider} from './context/GifsContext'\nimport LogoImage from './logo.svg'\n\nexport default function App() {\n  return (\n    <StaticContext.Provider value={{name : 'flor abril',estado: true}}>\n      <div className=\"App\">\n        <section className=\"App-content\">\n          <div className=\"App-logo\">\n            <Link to=\"/\" >\n              <img src={LogoImage} alt=\"Giffy\" className=\"App-logo\"/>\n          </Link>\n          </div>\n          <GifsContextProvider>\n            <Route\n              component={Home}\n              path=\"/\"\n              />\n              <Route\n              component={Home}\n              path=\"/Giffy\"\n              />\n            <Route\n              component={SearchResults}\n              path=\"/search/:keyword\"  />\n            <Route\n              component={Detail}\n              path=\"/gif/:id\"\n            />\n            <Route\n              component={()=> <h1>ERROR 404 :( </h1>}\n              path='/404'\n            />\n          </GifsContextProvider>\n        </section>\n      </div>\n    </StaticContext.Provider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}