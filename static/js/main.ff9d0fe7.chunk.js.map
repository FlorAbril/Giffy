{"version":3,"sources":["services/settings.js","services/getGifs.js","context/GifsContext.js","hooks/useGifs.js","components/Spinner/index.js","components/Gif/index.js","components/ListOfGifs/index.js","services/getTrendingTerms.js","components/Category/index.jsx","components/TrendingSearches/index.jsx","pages/Home/index.js","pages/SearchResults/index.js","pages/Detail/index.js","hooks/useGlobalGifs.js","context/StaticContext.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","API_URL","fromApiResponseToGifs","apiResponse","data","Array","isArray","map","image","images","title","id","url","downsized_medium","getGifs","limit","keyword","apiURL","fetch","then","res","json","Context","React","createContext","GifsContextProvider","children","useState","gifs","setGifs","Provider","value","useGifs","loading","setLoading","useContext","GifsContext","useEffect","keywordToUse","localStorage","getItem","setItem","Spinner","className","Gif","to","alt","src","ListOfGifs","key","Category","name","options","singleOption","TrendingSearches","trends","setTrends","getTrendingTerms","Home","setKeyword","useLocation","pushLocation","onSubmit","event","preventDefault","placeholder","onChange","target","type","SearchResults","params","decodeURI","Detail","gif","find","singleGif","console","log","StaticContext","estado","App","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff9d0fe7.chunk.js","sourcesContent":["export const API_KEY = 'dIJrma20pSU6ymMwWnDbiaT7NFHeAGVa'\r\nexport const API_URL = 'https://api.giphy.com/v1'\r\n","import {API_KEY, API_URL} from './settings'\n\n\nconst fromApiResponseToGifs = apiResponse => {\n  const {data = []} = apiResponse\n  if (Array.isArray(data)) {\n    const gifs = data.map(image => {\n      const {images, title, id} = image\n      const { url } = images.downsized_medium\n      return { title, id, url }\n    })\n    return gifs\n  }\n  return []\n}\n\nexport default function getGifs ({limit = 25, keyword = 'morty'} = {}) {\n  const apiURL = `${API_URL}/gifs/search?api_key=${API_KEY}&q=${keyword}&limit=${limit}&offset=0&rating=G&lang=en`\n\n  return fetch(apiURL)\n    .then(res => res.json())\n    .then(fromApiResponseToGifs)\n}","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst Context = React.createContext({})\r\n\r\nexport function GifsContextProvider({children}){\r\n    const [gifs,setGifs] = useState([])\r\n    return <Context.Provider value={{gifs,setGifs}}>\r\n        {children}\r\n\r\n    </Context.Provider>\r\n}\r\n\r\nexport default Context","import {useContext, useEffect,useState} from 'react'\r\nimport getGifs from 'services/getGifs'\r\nimport GifsContext from 'context/GifsContext'\r\n\r\nexport function useGifs({keyword} = {keyword: null}) {\r\n    const [loading, setLoading] = useState(false)\r\n    const {gifs,setGifs} = useContext(GifsContext)\r\n    // const [gifs, setGifs] = useState([])\r\n\r\n    useEffect(function () {\r\n        setLoading(true)\r\n        // recupero la keyword del local storage\r\n        const keywordToUse = keyword || localStorage.getItem('lastKeyword')\r\n        getGifs({ keyword : keywordToUse })\r\n        .then(gifs => {\r\n            setGifs(gifs)\r\n            setLoading(false)\r\n            // guardo la keyword en el local storage\r\n            localStorage.setItem('lastKeyword', keywordToUse)\r\n            })\r\n    }, [keyword,setGifs])\r\n\r\n    return{loading,gifs}\r\n}","import React from 'react'\nimport './styles.css'\n\nexport default function Spinner () {\n  return <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n}","import React from 'react'\nimport {Link} from 'wouter'\nimport './Gif.css'\n\nexport default function Gif ({ title, id, url }) {\n  return (\n    <div className=\"Gif\">\n      <Link to={`/gif/${id}`} className='Gif-link'>\n        <h4>{title}</h4>\n        <img alt={title} src={url} />\n      </Link>\n    </div>\n\n  )\n}","import React from 'react'\nimport Gif from 'components/Gif'\nimport './styles.css'\n\nexport default function ListOfGifs ({gifs,title}) {\n  return <div>\n    <h3>{title}</h3>\n    <div className='ListOfGifs'>\n      {\n        gifs.map(({id, title, url}) =>\n          <Gif\n            id={id}\n            key={id}\n            title={title}\n            url={url}\n          />\n        )\n      }\n    </div>\n  \n    </div>\n}","import {API_KEY, API_URL} from './settings'\r\n\r\nconst fromApiResponseToGifs = apiResponse => {\r\n  const {data = []} = apiResponse\r\n  return data\r\n}\r\n\r\nexport default function getTrendingTerms () {\r\n  const apiURL = `${API_URL}/trending/searches?api_key=${API_KEY}`\r\n\r\n  return fetch(apiURL)\r\n    .then(res => res.json())\r\n    .then(fromApiResponseToGifs)\r\n}","  \r\nimport React from \"react\";\r\nimport { Link } from \"wouter\";\r\n\r\nimport \"./Category.css\";\r\n\r\nexport default function Category({ name, options = [] }) {\r\n  return (\r\n    <div className='Category'>\r\n      <h3 className=\"Category-title\">{name}</h3>\r\n      <ul className=\"Category-list\">\r\n        {options.map((singleOption) => (\r\n          <li key={singleOption}>\r\n            <Link className=\"Category-link\" to={`/search/${singleOption}`}>\r\n              {singleOption}\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport getTrendingTerms from 'services/getTrendingTerms'\r\nimport Category from 'components/Category';\r\n\r\nexport default function TrendingSearches(){\r\n    const [trends, setTrends] = useState([])\r\n\r\n    useEffect(function (){\r\n        getTrendingTerms().then(setTrends)\r\n    },[])\r\n\r\nreturn(<Category name='Tendencias' options={trends}/>)\r\n}","import React, { useState } from \"react\"\nimport {useLocation } from \"wouter\"\nimport {useGifs} from 'hooks/useGifs'\nimport Spinner from 'components/Spinner'\nimport ListOfGifs from 'components/ListOfGifs'\nimport TrendingSearches from 'components/TrendingSearches'\n\n\n\nexport default function Home() {\n  const [keyword,setKeyword]= useState('')\n  const [, pushLocation] = useLocation()\n  const {loading,gifs} = useGifs()\n\n  const handleSubmit = event =>{\n    event.preventDefault()\n    pushLocation(`/search/${keyword}`)\n  }\n  const handleChange = event =>{\n    setKeyword(event.target.value)\n  }\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input placeholder=\"Buscar gifs\" onChange={handleChange} type=\"text\" value={keyword}/>\n      </form>\n    {\n      loading\n        && <Spinner />\n    }\n     <div className=\"wrapper-gif\">\n      {loading \n        || <ListOfGifs gifs={gifs} title=\"Última búsqueda\" />\n      }\n      <TrendingSearches/>\n     </div>\n    </>\n  )\n}","import React from 'react'\nimport Spinner from 'components/Spinner'\nimport ListOfGifs from 'components/ListOfGifs'\nimport {useGifs} from 'hooks/useGifs'\n\nexport default function SearchResults ({ params }) {\n  const { keyword } = params\n  const {loading,gifs} = useGifs({keyword})\n\n  return <>\n    {loading\n      ? <Spinner />\n      :<> <h3>{decodeURI(keyword)}</h3>\n        <ListOfGifs gifs={gifs} /></>\n    }\n  </>\n}","import React from 'react'\nimport Gif from 'components/Gif'\nimport useGlobalGifs from 'hooks/useGlobalGifs'\n\nexport default function Detail ({ params }) {\n  const gifs = useGlobalGifs()\n\n  const gif = gifs.find(singleGif => singleGif.id === params.id)\n  console.log(gif)\n\n  return <Gif {...gif}></Gif>\n}","import {useContext} from 'react'\r\nimport GifsContext from 'context/GifsContext'\r\n\r\n\r\nexport default function useGlobalGifs(){\r\n  const {gifs}= useContext(GifsContext)\r\nreturn gifs\r\n}","import React from 'react'\r\n\r\nconst StaticContext = React.createContext({\r\n    name : 'sin provider',\r\n    estado: true\r\n})\r\n\r\n\r\nexport default StaticContext","import React from 'react';\nimport './App.css'\nimport Home from './pages/Home'\nimport SearchResults from './pages/SearchResults'\nimport Detail from './pages/Detail'\nimport { Link, Route } from \"wouter\"\nimport StaticContext from './context/StaticContext'\nimport {GifsContextProvider} from './context/GifsContext'\n\nexport default function App() {\n  return (\n    <StaticContext.Provider value={{name : 'flor abril',estado: true}}>\n      <div className=\"App\">\n        <section className=\"App-content\">\n          <Link to=\"/\">\n            <img className=\"App-logo\" alt='Giffy logo' src='./logo.svg' />\n          </Link>\n          <GifsContextProvider>\n            <Route\n              component={Home}\n              path=\"/\"\n              />\n              <Route\n              component={Home}\n              path=\"/Giffy\"\n              />\n            <Route\n              component={SearchResults}\n              path=\"/search/:keyword\"  />\n            <Route\n              component={Detail}\n              path=\"/gif/:id\"\n            />\n          </GifsContextProvider>\n        </section>\n      </div>\n    </StaticContext.Provider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}